{"ast":null,"code":"import { AuthGuard } from './route-guards/auth.guard';\nimport { ConfirmGuard } from './route-guards/confirm.guard';\nimport { inject } from '@angular/core';\n// lazy loading of standalone components\n// hence loadComponent\nexport const routes = [{\n  path: '',\n  redirectTo: 'login',\n  pathMatch: 'full'\n},\n// authenticate skalar by login\n{\n  path: 'login',\n  loadComponent: () => import('../login/login.component').then(mod => mod.LoginComponent)\n},\n// create an new account\n{\n  path: 'sign-up',\n  loadComponent: () => import('../signup/signup.component').then(mod => mod.SignUpComponent)\n},\n// first page loaded on login\n{\n  path: 'home',\n  loadComponent: () => import('../home/home.component').then(mod => mod.HomeComponent),\n  canActivate: [() => inject(AuthGuard).canActivate()]\n},\n// specific page within a category requested with multiple posts\n{\n  path: 'specific-feed',\n  loadComponent: () => import('../feed-folder/specific-feed-page/specific-feed-page.component').then(mod => mod.SpecificFeedPageComponent),\n  canActivate: [() => inject(AuthGuard).canActivate()]\n},\n// one single post, able to be viewed by viewers without skalarly accounts\n// any navigation away from this page will require authentication\n{\n  path: 'single-feed',\n  title: 'single-feed',\n  loadComponent: () => import('../feed-folder/single-feed-page/single-feed-page.component').then(mod => mod.SingleFeedPageComponent),\n  canDeactivate: [() => inject(AuthGuard).canActivate()]\n},\n// skalar profile\n{\n  path: 'profile',\n  loadComponent: () => import('../profile/profile.component').then(mod => mod.ProfileComponent),\n  canActivate: [() => inject(AuthGuard).canActivate()]\n},\n// edit profile\n{\n  path: 'edit-profile',\n  title: 'edit-profile',\n  loadComponent: () => import('../edit-profile/edit-profile.component').then(mod => mod.EditProfileComponent),\n  canDeactivate: [() => inject(ConfirmGuard).canDeactivate()]\n}];","map":{"version":3,"names":["AuthGuard","ConfirmGuard","inject","routes","path","redirectTo","pathMatch","loadComponent","then","mod","LoginComponent","SignUpComponent","HomeComponent","canActivate","SpecificFeedPageComponent","title","SingleFeedPageComponent","canDeactivate","ProfileComponent","EditProfileComponent"],"sources":["/Users/chaseolsen/skalarly-MVP/skalarly/src/app/app-routes/app-routing.module.ts"],"sourcesContent":["import { AuthGuard } from './route-guards/auth.guard';\nimport { ConfirmGuard } from './route-guards/confirm.guard';\nimport { Routes } from '@angular/router';\nimport { inject } from '@angular/core';\n\n// lazy loading of standalone components\n// hence loadComponent\nexport const routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  // authenticate skalar by login\n  {\n    path: 'login',\n    loadComponent: () =>\n      import('../login/login.component').then((mod) => mod.LoginComponent)\n  },\n  // create an new account\n  {\n    path: 'sign-up',\n    loadComponent: () =>\n      import('../signup/signup.component').then((mod) => mod.SignUpComponent)\n  },\n  // first page loaded on login\n  {\n    path: 'home',\n    loadComponent: () =>\n      import('../home/home.component').then((mod) => mod.HomeComponent),\n    canActivate: [() => inject(AuthGuard).canActivate()]\n  },\n  // specific page within a category requested with multiple posts\n  {\n    path: 'specific-feed',\n    loadComponent: () =>\n      import(\n        '../feed-folder/specific-feed-page/specific-feed-page.component'\n      ).then((mod) => mod.SpecificFeedPageComponent),\n    canActivate: [() => inject(AuthGuard).canActivate()]\n  },\n  // one single post, able to be viewed by viewers without skalarly accounts\n  // any navigation away from this page will require authentication\n  {\n    path: 'single-feed',\n    title: 'single-feed',\n    loadComponent: () =>\n      import('../feed-folder/single-feed-page/single-feed-page.component').then(\n        (mod) => mod.SingleFeedPageComponent\n      ),\n    canDeactivate: [() => inject(AuthGuard).canActivate()]\n  },\n\n  // skalar profile\n  {\n    path: 'profile',\n    loadComponent: () =>\n      import('../profile/profile.component').then(\n        (mod) => mod.ProfileComponent\n      ),\n    canActivate: [() => inject(AuthGuard).canActivate()]\n  },\n  // edit profile\n  {\n    path: 'edit-profile',\n    title: 'edit-profile',\n    loadComponent: () =>\n      import('../edit-profile/edit-profile.component').then(\n        (mod) => mod.EditProfileComponent\n      ),\n    canDeactivate: [() => inject(ConfirmGuard).canDeactivate()]\n  }\n];\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,2BAA2B;AACrD,SAASC,YAAY,QAAQ,8BAA8B;AAE3D,SAASC,MAAM,QAAQ,eAAe;AAEtC;AACA;AACA,OAAO,MAAMC,MAAM,GAAW,CAC5B;EAAEC,IAAI,EAAE,EAAE;EAAEC,UAAU,EAAE,OAAO;EAAEC,SAAS,EAAE;AAAM,CAAE;AACpD;AACA;EACEF,IAAI,EAAE,OAAO;EACbG,aAAa,EAAEA,CAAA,KACb,MAAM,CAAC,0BAA0B,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,cAAc;CACtE;AACD;AACA;EACEN,IAAI,EAAE,SAAS;EACfG,aAAa,EAAEA,CAAA,KACb,MAAM,CAAC,4BAA4B,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACE,eAAe;CACzE;AACD;AACA;EACEP,IAAI,EAAE,MAAM;EACZG,aAAa,EAAEA,CAAA,KACb,MAAM,CAAC,wBAAwB,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACG,aAAa,CAAC;EACnEC,WAAW,EAAE,CAAC,MAAMX,MAAM,CAACF,SAAS,CAAC,CAACa,WAAW,EAAE;CACpD;AACD;AACA;EACET,IAAI,EAAE,eAAe;EACrBG,aAAa,EAAEA,CAAA,KACb,MAAM,CACJ,gEAAgE,CACjE,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACK,yBAAyB,CAAC;EAChDD,WAAW,EAAE,CAAC,MAAMX,MAAM,CAACF,SAAS,CAAC,CAACa,WAAW,EAAE;CACpD;AACD;AACA;AACA;EACET,IAAI,EAAE,aAAa;EACnBW,KAAK,EAAE,aAAa;EACpBR,aAAa,EAAEA,CAAA,KACb,MAAM,CAAC,4DAA4D,CAAC,CAACC,IAAI,CACtEC,GAAG,IAAKA,GAAG,CAACO,uBAAuB,CACrC;EACHC,aAAa,EAAE,CAAC,MAAMf,MAAM,CAACF,SAAS,CAAC,CAACa,WAAW,EAAE;CACtD;AAED;AACA;EACET,IAAI,EAAE,SAAS;EACfG,aAAa,EAAEA,CAAA,KACb,MAAM,CAAC,8BAA8B,CAAC,CAACC,IAAI,CACxCC,GAAG,IAAKA,GAAG,CAACS,gBAAgB,CAC9B;EACHL,WAAW,EAAE,CAAC,MAAMX,MAAM,CAACF,SAAS,CAAC,CAACa,WAAW,EAAE;CACpD;AACD;AACA;EACET,IAAI,EAAE,cAAc;EACpBW,KAAK,EAAE,cAAc;EACrBR,aAAa,EAAEA,CAAA,KACb,MAAM,CAAC,wCAAwC,CAAC,CAACC,IAAI,CAClDC,GAAG,IAAKA,GAAG,CAACU,oBAAoB,CAClC;EACHF,aAAa,EAAE,CAAC,MAAMf,MAAM,CAACD,YAAY,CAAC,CAACgB,aAAa,EAAE;CAC3D,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}