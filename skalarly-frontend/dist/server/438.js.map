{"version":3,"file":"438.js","mappings":";;;;;;;;;;;;;;;;AAAqG;;AAM/F,MAAOC,qBAAqB;EAIVC,EAAA;EAAwBC,QAAA;EAHpCC,UAAU;EACVC,QAAQ,GAAY,KAAK;EACvBC,YAAY,GAA0B,IAAIN,uDAAY,EAAE;EAClEO,YAAoBL,EAAc,EAAUC,QAAmB;IAA3C,KAAAD,EAAE,GAAFA,EAAE;IAAsB,KAAAC,QAAQ,GAARA,QAAQ;EAAc;EAGlE;EAEAK,OAAOA,CAACC,KAAiB;IACvB,IAAI,CAACC,YAAY,CAACD,KAAK,CAACE,MAAM,CAAC;EACjC;EAEA;EAEAC,WAAWA,CAACH,KAAiB;IAC3B;IACA,MAAMI,KAAK,GAAGJ,KAAK,CAACK,OAAO,CAAC,CAAC,CAAC,IAAIL,KAAK,CAACM,cAAc,CAAC,CAAC,CAAC;IACzD,MAAMC,QAAQ,GAAGH,KAAK,CAACI,OAAO;IAE9B;IACA,IAAI,IAAI,CAACb,UAAU,IAAIY,QAAQ,KAAK,IAAI,CAACZ,UAAU,EAAE;MACnD;MACA,MAAMO,MAAM,GAAG,IAAI,CAACP,UAAU,GAAGY,QAAQ;MACzC,IAAI,CAACN,YAAY,CAACC,MAAM,CAAC;;IAG3B;IACA,IAAI,CAACP,UAAU,GAAGY,QAAQ;EAC5B;EAEQN,YAAYA,CAACC,MAAc;IACjC,IAAIA,MAAM,GAAG,CAAC,EAAE;MACd,IAAI,CAACO,WAAW,EAAE;MAClB,IAAI,CAACZ,YAAY,CAACa,IAAI,CAAC,KAAK,CAAC;KAC9B,MAAM;MACL,IAAI,CAACC,WAAW,EAAE;MAClB,IAAI,CAACd,YAAY,CAACa,IAAI,CAAC,IAAI,CAAC;;EAEhC;EAEQD,WAAWA,CAAA;IACjB,IAAI,CAAC,IAAI,CAACb,QAAQ,EAAE;MAClB,IAAI,CAACF,QAAQ,CAACkB,QAAQ,CAAC,IAAI,CAACnB,EAAE,CAACoB,aAAa,EAAE,WAAW,EAAE,mBAAmB,CAAC;MAC/E,IAAI,CAACnB,QAAQ,CAACkB,QAAQ,CAAC,IAAI,CAACnB,EAAE,CAACoB,aAAa,EAAE,YAAY,EAAE,gBAAgB,CAAC;MAC7E,IAAI,CAACjB,QAAQ,GAAG,IAAI;;EAExB;EAEQe,WAAWA,CAAA;IACjB,IAAI,IAAI,CAACf,QAAQ,EAAE;MACjB,IAAI,CAACF,QAAQ,CAACoB,WAAW,CAAC,IAAI,CAACrB,EAAE,CAACoB,aAAa,EAAE,WAAW,CAAC;MAC7D,IAAI,CAACjB,QAAQ,GAAG,KAAK;;EAEzB;;qBAtDSJ,qBAAqB,EAAAuB,+DAAA,CAAAA,qDAAA,GAAAA,+DAAA,CAAAA,oDAAA;EAAA;;UAArBvB,qBAAqB;IAAA2B,SAAA;IAAAC,YAAA,WAAAC,mCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;iBAArBC,GAAA,CAAAxB,OAAA,CAAAyB,MAAA,CAAe;QAAA,UAAAT,6DAAA,wBAAAW,mDAAAF,MAAA;UAAA,OAAfD,GAAA,CAAApB,WAAA,CAAAqB,MAAA,CAAmB;QAAA,UAAAT,6DAAA","sources":["./src/app/assistant-level-code/custom-architecture-aids/directives/scroll-toggle.directive.ts"],"sourcesContent":["import { Directive, ElementRef, EventEmitter, HostListener, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  standalone: true,\n  selector: '[scrollToggle]'\n})\nexport class scrollToggleDirective {\n    private lastTouchY: number | undefined;\n    private isHidden: boolean = false;\n    @Output() toggleHeader: EventEmitter<boolean> = new EventEmitter();\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  \n    // Desktop\n    @HostListener('window:wheel', ['$event'])\n    onWheel(event: WheelEvent): void {\n      this.handleScroll(event.deltaY);\n    }\n  \n    // Mobile\n    @HostListener('window:touchmove', ['$event'])\n    onTouchMove(event: TouchEvent): void {\n      //  determine the direction of the touch move\n      const touch = event.touches[0] || event.changedTouches[0];\n      const currentY = touch.clientY;\n  \n      //  previous Y-position to compare with\n      if (this.lastTouchY && currentY !== this.lastTouchY) {\n        // determine the scroll direction based on touch movement\n        const deltaY = this.lastTouchY - currentY;\n        this.handleScroll(deltaY);\n      }\n  \n      // update the last Y-position for next move\n      this.lastTouchY = currentY;\n    }\n  \n    private handleScroll(deltaY: number): void {\n      if (deltaY > 0) {\n        this.hideElement();\n        this.toggleHeader.emit(false);\n      } else {\n        this.showElement();\n        this.toggleHeader.emit(true);\n      }\n    }\n  \n    private hideElement(): void {\n      if (!this.isHidden) {\n        this.renderer.setStyle(this.el.nativeElement, 'transform', 'translateY(-100%)');\n        this.renderer.setStyle(this.el.nativeElement, 'transition', 'transform 0.3s');\n        this.isHidden = true;\n      }\n    }\n  \n    private showElement(): void {\n      if (this.isHidden) {\n        this.renderer.removeStyle(this.el.nativeElement, 'transform');\n        this.isHidden = false;\n      }\n    }\n    \n}"],"names":["EventEmitter","scrollToggleDirective","el","renderer","lastTouchY","isHidden","toggleHeader","constructor","onWheel","event","handleScroll","deltaY","onTouchMove","touch","touches","changedTouches","currentY","clientY","hideElement","emit","showElement","setStyle","nativeElement","removeStyle","i0","ɵɵdirectiveInject","ElementRef","Renderer2","selectors","hostBindings","scrollToggleDirective_HostBindings","rf","ctx","$event","ɵɵresolveWindow","scrollToggleDirective_touchmove_HostBindingHandler"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}