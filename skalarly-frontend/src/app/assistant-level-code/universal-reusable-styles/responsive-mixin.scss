 @use '../universal-reusable-styles/break-points' as device;
 
@mixin media-query($screen, $min-width) {
    $index: index(map-keys(device.$device-sizes), $screen);
    $next-index: $index + 1;
    $device-sizes-keys: map-keys(device.$device-sizes);
    $next-screen: if($next-index <= length($device-sizes-keys), nth($device-sizes-keys, $next-index), null);
    $max-width: if($next-screen, map-get(device.$device-sizes, $next-screen) - 1px, null);
    $media-query: "(min-width: #{$min-width})";
    @if $max-width {
        $media-query: "#{$media-query} and (max-width: #{$max-width})";
      }
      @media #{$media-query} {
        @content;
      }
}
@mixin responsiveFontSize($sizeVariant: 'default') {
  @each $screen, $min-width in device.$device-sizes {
    @media (min-width: $min-width) {
          $screen-font-size: map-get(device.$font-sizes, $screen);
          $screen-font-sub-size: map-get(device.$font-sub-sizes, $screen);
          $line-height-ratio: map-get(device.$line-heights, $screen);
      
          $final-font-size: $screen-font-size;
          @if $sizeVariant == 'smaller' {
            $final-font-size: $screen-font-size - $screen-font-sub-size;
          } @else if $sizeVariant == 'larger' {
            $final-font-size: $screen-font-size + $screen-font-sub-size + 0.9rem;
          }
          /* Apply styles */
          font-size: $final-font-size;
          line-height: $final-font-size * $line-height-ratio;
        }
      }
  }
