@use '../universal-reusable-styles/break-points' as device;

// reusable algorithms
@mixin media-query($screen, $min-width) {
    $index: index(map-keys(device.$device-sizes), $screen);
    $next-index: $index + 1;
    $device-sizes-keys: map-keys(device.$device-sizes);
    $next-screen: if($next-index <= length($device-sizes-keys), nth($device-sizes-keys, $next-index), null);
    $max-width: if($next-screen, map-get(device.$device-sizes, $next-screen) - 1px, null);
    $media-query: "(min-width: #{$min-width})";
    @if $max-width {
        $media-query: "#{$media-query} and (max-width: #{$max-width})";
      }
      @media #{$media-query} {
        @content;
      }
}
// Shared font style mixin
@mixin fontStyles($sizeVariant: 'default') {
  font-family: var(--skalarly-font);
  $fontSizeVar: if($sizeVariant == 'smaller', '--font-size-smaller', if($sizeVariant == 'larger', '--font-size-larger', '--font-size'));
  font-size: #{$fontSizeVar};
  line-height: calc(#{$fontSizeVar} * var(--line-height));
}
// Responsive font size mixin with size variants
@mixin responsiveFontSize($sizeVariant: 'default') {
  @include fontStyles($sizeVariant);

  @each $screen, $min-width in device.$device-sizes {
    @if $screen != 'base' {
      @include media-query($screen, $min-width) {
        --font-size: #{map-get(device.$font-sizes, $screen)};
        --font-sub-size: #{map-get(device.$font-sub-sizes, $screen)};
        --line-height: #{map-get(device.$line-heights, $screen) * map-get(device.$font-sizes, $screen)};
        font-size: var(--font-size);
        line-height: var(--line-height);
      }
    }
  }
}
// Apply the mixins
.font-size-small {
  @include responsiveFontSize('smaller');
}

.font-size-default {
  @include responsiveFontSize();
}

.font-size-large {
  @include responsiveFontSize('larger');
}
