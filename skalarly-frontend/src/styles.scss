/* You can add global styles to this file, and also import other style files */
@use 'app/universal-reusable-styles/break-points' as device;
@use 'app/universal-reusable-styles/common' as universal;
@use 'app/universal-reusable-styles/responsive-mixin' as responsive;
@import '~@angular/material/prebuilt-themes/indigo-pink.css';
// universal font
$skalarly-font: 'Cormorant Garamond', serif;
$toolbar-shadow-color: rgba(0, 0, 0, 0.25);
$toolbar-background-color: #282828;
b {
// for matching search results to an api call list
// displays light blue for `<b>${match}</b>` bold.pipe implementation
color: lightblue
}
body {
  // better to implement specific cases. This is to confusing
  // @include responsive.responsiveFontSize;
  font-family: $skalarly-font;
  margin: 0;
  padding: 0;
  background-image: linear-gradient(whitesmoke,white);
  @include universal.common;
  @include universal.pageSize;
 }
.condition-met{
    color: #228B22;
}
mat-hint{
    color: grey;
}
mat-toolbar{
    box-shadow: 0px 2px 5px 0px $toolbar-shadow-color;
    background-color: $toolbar-background-color;
}
//  I want them as global variables
$shadow-size: null;
$shadow-size2: null;
@each $screen, $size in device.$font-sizes {
  @if (map-has-key(device.$device-sizes, $screen)) {
$shadow-size: $size !global;
$percentage: map-get(device.$font-sub-sizes, $screen);
$shadow-size2: calc($size + #{$percentage}) !global;
  }
}
// global mat form field animation
// Mixin for shared sparkle styles
@mixin generate-firework-dots($count) {
  @for $i from 1 through $count {
    // Each dot will have a unique class
    &.dot-#{$i}::before {
      content: '';
      position: absolute;
      border-radius: 50%;
      background-color: yellowgreen;
      width: 5px;
      height: 5px;
      opacity: 0;
      // Randomize the start position of the dot
      $random-top: random(100) * 50%;
      $random-left: random(100) * 1%;
      top: $random-top;
      left: $random-left;
      // Each dot will have a different animation delay
      $random-delay: random(2000) * 1ms;
      animation: firework-animation 2s ease-in-out $random-delay infinite;
    }
  }
}

.glow-animation {
  position: relative; // Needed for absolute positioning of pseudo-elements
  animation: glow 2.5s ease-in-out infinite;
  @keyframes glow {
    0%, 100% {
      box-shadow: 0 0 $shadow-size, var(--mdc-outlined-text-field-outline-color);
    }
    50% {
      box-shadow: 0 0 $shadow-size2, var(--mdc-outlined-text-field-outline-color);
    }
  }
}
  .error-animation {
    animation: error-glow 2.5s ease-in-out infinite, sparkle 1.5s ease-in-out;
  
    @keyframes error-glow {
      0%, 100% {
        box-shadow: 0 0 $shadow-size var(--mdc-outlined-text-field-error-outline-color);
      }
      50% {
        box-shadow: 0 $shadow-size2 $shadow-size2 var(--mdc-outlined-text-field-error-outline-color)
      }
    }
  }
  
  

.material-symbols-outlined {
  font-variation-settings:
  'FILL' 0,
  'wght' 100,
  'GRAD' 0,
  'opsz' 24
}
router-outlet[content] {
    flex: 1; // allow the content area to expand and fill available space 
@media (orientation: portrait) {
  padding-bottom: 4em; // adjust this value to match the footer's height in app scss 
  box-sizing: border-box; // include padding in the content's height calculation 
}
}
// mat form field 
@keyframes sparkle {
    0%, 100% {
      opacity: 1;
    }
    25% {
      opacity: 0.7;
    }
    50% {
      opacity: 1;
    }
    75% {
      opacity: 0.7;
    }
  };